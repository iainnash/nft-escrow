/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NftEscrowInterface extends ethers.utils.Interface {
  functions: {
    "cancelPendingSale(address,uint256)": FunctionFragment;
    "createPendingSale(address,uint256,address,uint256,address)": FunctionFragment;
    "getPendingSale(address,uint256)": FunctionFragment;
    "purchaseNFT(address,uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelPendingSale",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPendingSale",
    values: [string, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingSale",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseNFT",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelPendingSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPendingSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseNFT",
    data: BytesLike
  ): Result;

  events: {
    "CreatedPendingSale(uint256,address,address,address,uint256)": EventFragment;
    "PurchasedNFT(uint256,address,address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedPendingSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchasedNFT"): EventFragment;
}

export class NftEscrow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NftEscrowInterface;

  functions: {
    cancelPendingSale(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelPendingSale(address,uint256)"(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createPendingSale(
      nftContract: string,
      mediaId: BigNumberish,
      currency: string,
      currencyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPendingSale(address,uint256,address,uint256,address)"(
      nftContract: string,
      mediaId: BigNumberish,
      currency: string,
      currencyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPendingSale(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      currentOwner: string;
      currency: string;
      currencyAmount: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    "getPendingSale(address,uint256)"(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      currentOwner: string;
      currency: string;
      currencyAmount: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    purchaseNFT(
      nftContract: string,
      mediaId: BigNumberish,
      currencyAddress: string,
      currencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "purchaseNFT(address,uint256,address,uint256)"(
      nftContract: string,
      mediaId: BigNumberish,
      currencyAddress: string,
      currencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  cancelPendingSale(
    nftContract: string,
    mediaId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelPendingSale(address,uint256)"(
    nftContract: string,
    mediaId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createPendingSale(
    nftContract: string,
    mediaId: BigNumberish,
    currency: string,
    currencyAmount: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPendingSale(address,uint256,address,uint256,address)"(
    nftContract: string,
    mediaId: BigNumberish,
    currency: string,
    currencyAmount: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPendingSale(
    nftContract: string,
    mediaId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    recipient: string;
    currentOwner: string;
    currency: string;
    currencyAmount: BigNumber;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
  }>;

  "getPendingSale(address,uint256)"(
    nftContract: string,
    mediaId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    recipient: string;
    currentOwner: string;
    currency: string;
    currencyAmount: BigNumber;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
  }>;

  purchaseNFT(
    nftContract: string,
    mediaId: BigNumberish,
    currencyAddress: string,
    currencyAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "purchaseNFT(address,uint256,address,uint256)"(
    nftContract: string,
    mediaId: BigNumberish,
    currencyAddress: string,
    currencyAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelPendingSale(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelPendingSale(address,uint256)"(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPendingSale(
      nftContract: string,
      mediaId: BigNumberish,
      currency: string,
      currencyAmount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createPendingSale(address,uint256,address,uint256,address)"(
      nftContract: string,
      mediaId: BigNumberish,
      currency: string,
      currencyAmount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPendingSale(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      currentOwner: string;
      currency: string;
      currencyAmount: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    "getPendingSale(address,uint256)"(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      currentOwner: string;
      currency: string;
      currencyAmount: BigNumber;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
    }>;

    purchaseNFT(
      nftContract: string,
      mediaId: BigNumberish,
      currencyAddress: string,
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "purchaseNFT(address,uint256,address,uint256)"(
      nftContract: string,
      mediaId: BigNumberish,
      currencyAddress: string,
      currencyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CreatedPendingSale(
      tokenId: BigNumberish | null,
      tokenContract: string | null,
      recipient: string | null,
      currency: null,
      currencyAmount: null
    ): EventFilter;

    PurchasedNFT(
      tokenId: BigNumberish | null,
      tokenContract: string | null,
      seller: string | null,
      recipient: null,
      currency: null,
      currencyAmount: null
    ): EventFilter;
  };

  estimateGas: {
    cancelPendingSale(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelPendingSale(address,uint256)"(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createPendingSale(
      nftContract: string,
      mediaId: BigNumberish,
      currency: string,
      currencyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPendingSale(address,uint256,address,uint256,address)"(
      nftContract: string,
      mediaId: BigNumberish,
      currency: string,
      currencyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPendingSale(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPendingSale(address,uint256)"(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseNFT(
      nftContract: string,
      mediaId: BigNumberish,
      currencyAddress: string,
      currencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "purchaseNFT(address,uint256,address,uint256)"(
      nftContract: string,
      mediaId: BigNumberish,
      currencyAddress: string,
      currencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelPendingSale(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelPendingSale(address,uint256)"(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createPendingSale(
      nftContract: string,
      mediaId: BigNumberish,
      currency: string,
      currencyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPendingSale(address,uint256,address,uint256,address)"(
      nftContract: string,
      mediaId: BigNumberish,
      currency: string,
      currencyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPendingSale(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendingSale(address,uint256)"(
      nftContract: string,
      mediaId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseNFT(
      nftContract: string,
      mediaId: BigNumberish,
      currencyAddress: string,
      currencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "purchaseNFT(address,uint256,address,uint256)"(
      nftContract: string,
      mediaId: BigNumberish,
      currencyAddress: string,
      currencyAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
